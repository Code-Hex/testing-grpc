// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.13.0
// source: internal/testing/testing.proto

package testing

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type StatusGetRequest_Code int32

const (
	StatusGetRequest_OK                  StatusGetRequest_Code = 0
	StatusGetRequest_CANCELED            StatusGetRequest_Code = 1
	StatusGetRequest_UNKNOWN             StatusGetRequest_Code = 2
	StatusGetRequest_INVALIDARGUMENT     StatusGetRequest_Code = 3
	StatusGetRequest_DEADLINE_EXCEEDED   StatusGetRequest_Code = 4
	StatusGetRequest_NOT_FOUND           StatusGetRequest_Code = 5
	StatusGetRequest_ALREADY_EXISTS      StatusGetRequest_Code = 6
	StatusGetRequest_PERMISSION_DENIED   StatusGetRequest_Code = 7
	StatusGetRequest_RESOURCE_EXHAUSTED  StatusGetRequest_Code = 8
	StatusGetRequest_FAILED_PRECONDITION StatusGetRequest_Code = 9
	StatusGetRequest_ABORTED             StatusGetRequest_Code = 10
	StatusGetRequest_OUT_OF_RANGE        StatusGetRequest_Code = 11
	StatusGetRequest_UNIMPLEMENTED       StatusGetRequest_Code = 12
	StatusGetRequest_INTERNAL            StatusGetRequest_Code = 13
	StatusGetRequest_UNAVAILABLE         StatusGetRequest_Code = 14
	StatusGetRequest_DATALOSS            StatusGetRequest_Code = 15
	StatusGetRequest_UNAUTHENTICATED     StatusGetRequest_Code = 16
)

// Enum value maps for StatusGetRequest_Code.
var (
	StatusGetRequest_Code_name = map[int32]string{
		0:  "OK",
		1:  "CANCELED",
		2:  "UNKNOWN",
		3:  "INVALIDARGUMENT",
		4:  "DEADLINE_EXCEEDED",
		5:  "NOT_FOUND",
		6:  "ALREADY_EXISTS",
		7:  "PERMISSION_DENIED",
		8:  "RESOURCE_EXHAUSTED",
		9:  "FAILED_PRECONDITION",
		10: "ABORTED",
		11: "OUT_OF_RANGE",
		12: "UNIMPLEMENTED",
		13: "INTERNAL",
		14: "UNAVAILABLE",
		15: "DATALOSS",
		16: "UNAUTHENTICATED",
	}
	StatusGetRequest_Code_value = map[string]int32{
		"OK":                  0,
		"CANCELED":            1,
		"UNKNOWN":             2,
		"INVALIDARGUMENT":     3,
		"DEADLINE_EXCEEDED":   4,
		"NOT_FOUND":           5,
		"ALREADY_EXISTS":      6,
		"PERMISSION_DENIED":   7,
		"RESOURCE_EXHAUSTED":  8,
		"FAILED_PRECONDITION": 9,
		"ABORTED":             10,
		"OUT_OF_RANGE":        11,
		"UNIMPLEMENTED":       12,
		"INTERNAL":            13,
		"UNAVAILABLE":         14,
		"DATALOSS":            15,
		"UNAUTHENTICATED":     16,
	}
)

func (x StatusGetRequest_Code) Enum() *StatusGetRequest_Code {
	p := new(StatusGetRequest_Code)
	*p = x
	return p
}

func (x StatusGetRequest_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatusGetRequest_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_testing_testing_proto_enumTypes[0].Descriptor()
}

func (StatusGetRequest_Code) Type() protoreflect.EnumType {
	return &file_internal_testing_testing_proto_enumTypes[0]
}

func (x StatusGetRequest_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatusGetRequest_Code.Descriptor instead.
func (StatusGetRequest_Code) EnumDescriptor() ([]byte, []int) {
	return file_internal_testing_testing_proto_rawDescGZIP(), []int{0, 0}
}

type DetailGetRequest_Code int32

const (
	DetailGetRequest_OK                   DetailGetRequest_Code = 0
	DetailGetRequest_RETRY_INFO           DetailGetRequest_Code = 1
	DetailGetRequest_DEBUG_INFO           DetailGetRequest_Code = 2
	DetailGetRequest_QUOTA_FAILURE        DetailGetRequest_Code = 3
	DetailGetRequest_ERROR_INFO           DetailGetRequest_Code = 4
	DetailGetRequest_PRECONDITION_FAILURE DetailGetRequest_Code = 5
	DetailGetRequest_BAD_REQUEST          DetailGetRequest_Code = 6
	DetailGetRequest_REQUEST_INFO         DetailGetRequest_Code = 7
	DetailGetRequest_RESOURCE_INFO        DetailGetRequest_Code = 8
	DetailGetRequest_HELP                 DetailGetRequest_Code = 9
	DetailGetRequest_LOCALIZED_MESSAGE    DetailGetRequest_Code = 10
	DetailGetRequest_COMBINED_ALL         DetailGetRequest_Code = 20
)

// Enum value maps for DetailGetRequest_Code.
var (
	DetailGetRequest_Code_name = map[int32]string{
		0:  "OK",
		1:  "RETRY_INFO",
		2:  "DEBUG_INFO",
		3:  "QUOTA_FAILURE",
		4:  "ERROR_INFO",
		5:  "PRECONDITION_FAILURE",
		6:  "BAD_REQUEST",
		7:  "REQUEST_INFO",
		8:  "RESOURCE_INFO",
		9:  "HELP",
		10: "LOCALIZED_MESSAGE",
		20: "COMBINED_ALL",
	}
	DetailGetRequest_Code_value = map[string]int32{
		"OK":                   0,
		"RETRY_INFO":           1,
		"DEBUG_INFO":           2,
		"QUOTA_FAILURE":        3,
		"ERROR_INFO":           4,
		"PRECONDITION_FAILURE": 5,
		"BAD_REQUEST":          6,
		"REQUEST_INFO":         7,
		"RESOURCE_INFO":        8,
		"HELP":                 9,
		"LOCALIZED_MESSAGE":    10,
		"COMBINED_ALL":         20,
	}
)

func (x DetailGetRequest_Code) Enum() *DetailGetRequest_Code {
	p := new(DetailGetRequest_Code)
	*p = x
	return p
}

func (x DetailGetRequest_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DetailGetRequest_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_testing_testing_proto_enumTypes[1].Descriptor()
}

func (DetailGetRequest_Code) Type() protoreflect.EnumType {
	return &file_internal_testing_testing_proto_enumTypes[1]
}

func (x DetailGetRequest_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DetailGetRequest_Code.Descriptor instead.
func (DetailGetRequest_Code) EnumDescriptor() ([]byte, []int) {
	return file_internal_testing_testing_proto_rawDescGZIP(), []int{2, 0}
}

type SetRequest_HealthCheckStatus int32

const (
	SetRequest_UNKNOWN         SetRequest_HealthCheckStatus = 0
	SetRequest_SERVING         SetRequest_HealthCheckStatus = 1
	SetRequest_NOT_SERVING     SetRequest_HealthCheckStatus = 2
	SetRequest_SERVICE_UNKNOWN SetRequest_HealthCheckStatus = 3
)

// Enum value maps for SetRequest_HealthCheckStatus.
var (
	SetRequest_HealthCheckStatus_name = map[int32]string{
		0: "UNKNOWN",
		1: "SERVING",
		2: "NOT_SERVING",
		3: "SERVICE_UNKNOWN",
	}
	SetRequest_HealthCheckStatus_value = map[string]int32{
		"UNKNOWN":         0,
		"SERVING":         1,
		"NOT_SERVING":     2,
		"SERVICE_UNKNOWN": 3,
	}
)

func (x SetRequest_HealthCheckStatus) Enum() *SetRequest_HealthCheckStatus {
	p := new(SetRequest_HealthCheckStatus)
	*p = x
	return p
}

func (x SetRequest_HealthCheckStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SetRequest_HealthCheckStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_testing_testing_proto_enumTypes[2].Descriptor()
}

func (SetRequest_HealthCheckStatus) Type() protoreflect.EnumType {
	return &file_internal_testing_testing_proto_enumTypes[2]
}

func (x SetRequest_HealthCheckStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SetRequest_HealthCheckStatus.Descriptor instead.
func (SetRequest_HealthCheckStatus) EnumDescriptor() ([]byte, []int) {
	return file_internal_testing_testing_proto_rawDescGZIP(), []int{5, 0}
}

type StatusGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code StatusGetRequest_Code `protobuf:"varint,1,opt,name=code,proto3,enum=testing.StatusGetRequest_Code" json:"code,omitempty"`
}

func (x *StatusGetRequest) Reset() {
	*x = StatusGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_testing_testing_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusGetRequest) ProtoMessage() {}

func (x *StatusGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_testing_testing_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusGetRequest.ProtoReflect.Descriptor instead.
func (*StatusGetRequest) Descriptor() ([]byte, []int) {
	return file_internal_testing_testing_proto_rawDescGZIP(), []int{0}
}

func (x *StatusGetRequest) GetCode() StatusGetRequest_Code {
	if x != nil {
		return x.Code
	}
	return StatusGetRequest_OK
}

type StatusGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *StatusGetResponse) Reset() {
	*x = StatusGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_testing_testing_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusGetResponse) ProtoMessage() {}

func (x *StatusGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_testing_testing_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusGetResponse.ProtoReflect.Descriptor instead.
func (*StatusGetResponse) Descriptor() ([]byte, []int) {
	return file_internal_testing_testing_proto_rawDescGZIP(), []int{1}
}

func (x *StatusGetResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type DetailGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code DetailGetRequest_Code `protobuf:"varint,1,opt,name=code,proto3,enum=testing.DetailGetRequest_Code" json:"code,omitempty"`
}

func (x *DetailGetRequest) Reset() {
	*x = DetailGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_testing_testing_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailGetRequest) ProtoMessage() {}

func (x *DetailGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_testing_testing_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailGetRequest.ProtoReflect.Descriptor instead.
func (*DetailGetRequest) Descriptor() ([]byte, []int) {
	return file_internal_testing_testing_proto_rawDescGZIP(), []int{2}
}

func (x *DetailGetRequest) GetCode() DetailGetRequest_Code {
	if x != nil {
		return x.Code
	}
	return DetailGetRequest_OK
}

type DetailGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *DetailGetResponse) Reset() {
	*x = DetailGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_testing_testing_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailGetResponse) ProtoMessage() {}

func (x *DetailGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_testing_testing_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailGetResponse.ProtoReflect.Descriptor instead.
func (*DetailGetResponse) Descriptor() ([]byte, []int) {
	return file_internal_testing_testing_proto_rawDescGZIP(), []int{3}
}

func (x *DetailGetResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type MetadataGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata []*MetadataGetResponse_Entry `protobuf:"bytes,1,rep,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *MetadataGetResponse) Reset() {
	*x = MetadataGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_testing_testing_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetadataGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataGetResponse) ProtoMessage() {}

func (x *MetadataGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_testing_testing_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataGetResponse.ProtoReflect.Descriptor instead.
func (*MetadataGetResponse) Descriptor() ([]byte, []int) {
	return file_internal_testing_testing_proto_rawDescGZIP(), []int{4}
}

func (x *MetadataGetResponse) GetMetadata() []*MetadataGetResponse_Entry {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type SetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status SetRequest_HealthCheckStatus `protobuf:"varint,1,opt,name=status,proto3,enum=testing.SetRequest_HealthCheckStatus" json:"status,omitempty"`
}

func (x *SetRequest) Reset() {
	*x = SetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_testing_testing_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRequest) ProtoMessage() {}

func (x *SetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_testing_testing_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRequest.ProtoReflect.Descriptor instead.
func (*SetRequest) Descriptor() ([]byte, []int) {
	return file_internal_testing_testing_proto_rawDescGZIP(), []int{5}
}

func (x *SetRequest) GetStatus() SetRequest_HealthCheckStatus {
	if x != nil {
		return x.Status
	}
	return SetRequest_UNKNOWN
}

type EchoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *EchoRequest) Reset() {
	*x = EchoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_testing_testing_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EchoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EchoRequest) ProtoMessage() {}

func (x *EchoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_testing_testing_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EchoRequest.ProtoReflect.Descriptor instead.
func (*EchoRequest) Descriptor() ([]byte, []int) {
	return file_internal_testing_testing_proto_rawDescGZIP(), []int{6}
}

func (x *EchoRequest) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type EchoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *EchoResponse) Reset() {
	*x = EchoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_testing_testing_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EchoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EchoResponse) ProtoMessage() {}

func (x *EchoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_testing_testing_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EchoResponse.ProtoReflect.Descriptor instead.
func (*EchoResponse) Descriptor() ([]byte, []int) {
	return file_internal_testing_testing_proto_rawDescGZIP(), []int{7}
}

func (x *EchoResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type ServerStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Duration string `protobuf:"bytes,1,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *ServerStreamRequest) Reset() {
	*x = ServerStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_testing_testing_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerStreamRequest) ProtoMessage() {}

func (x *ServerStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_testing_testing_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerStreamRequest.ProtoReflect.Descriptor instead.
func (*ServerStreamRequest) Descriptor() ([]byte, []int) {
	return file_internal_testing_testing_proto_rawDescGZIP(), []int{8}
}

func (x *ServerStreamRequest) GetDuration() string {
	if x != nil {
		return x.Duration
	}
	return ""
}

type ServerStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *ServerStreamResponse) Reset() {
	*x = ServerStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_testing_testing_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerStreamResponse) ProtoMessage() {}

func (x *ServerStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_testing_testing_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerStreamResponse.ProtoReflect.Descriptor instead.
func (*ServerStreamResponse) Descriptor() ([]byte, []int) {
	return file_internal_testing_testing_proto_rawDescGZIP(), []int{9}
}

func (x *ServerStreamResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type MetadataGetResponse_Entry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value []string `protobuf:"bytes,2,rep,name=value,proto3" json:"value,omitempty"`
}

func (x *MetadataGetResponse_Entry) Reset() {
	*x = MetadataGetResponse_Entry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_testing_testing_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetadataGetResponse_Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataGetResponse_Entry) ProtoMessage() {}

func (x *MetadataGetResponse_Entry) ProtoReflect() protoreflect.Message {
	mi := &file_internal_testing_testing_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataGetResponse_Entry.ProtoReflect.Descriptor instead.
func (*MetadataGetResponse_Entry) Descriptor() ([]byte, []int) {
	return file_internal_testing_testing_proto_rawDescGZIP(), []int{4, 0}
}

func (x *MetadataGetResponse_Entry) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *MetadataGetResponse_Entry) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

var File_internal_testing_testing_proto protoreflect.FileDescriptor

var file_internal_testing_testing_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x07, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfd, 0x02, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0xb4, 0x02, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x52, 0x47, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x03,
	0x12, 0x15, 0x0a, 0x11, 0x44, 0x45, 0x41, 0x44, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x45, 0x58, 0x43,
	0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46,
	0x4f, 0x55, 0x4e, 0x44, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44,
	0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x45,
	0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10,
	0x07, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x45, 0x58,
	0x48, 0x41, 0x55, 0x53, 0x54, 0x45, 0x44, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x5f, 0x50, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x12,
	0x10, 0x0a, 0x0c, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10,
	0x0b, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x45, 0x44, 0x10, 0x0c, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c,
	0x10, 0x0d, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x0e, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x41, 0x54, 0x41, 0x4c, 0x4f, 0x53, 0x53, 0x10,
	0x0f, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x4e, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43,
	0x41, 0x54, 0x45, 0x44, 0x10, 0x10, 0x22, 0x25, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x9d, 0x02,
	0x0a, 0x10, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xd4, 0x01, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x54, 0x52, 0x59,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x45, 0x42, 0x55, 0x47,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x51, 0x55, 0x4f, 0x54, 0x41,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52,
	0x45, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55,
	0x52, 0x45, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x41, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x08, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x45,
	0x4c, 0x50, 0x10, 0x09, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x0a, 0x12, 0x10, 0x0a, 0x0c, 0x43,
	0x4f, 0x4d, 0x42, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x14, 0x22, 0x25, 0x0a,
	0x11, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x22, 0x86, 0x01, 0x0a, 0x13, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x2f, 0x0a, 0x05,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa0, 0x01,
	0x0a, 0x0a, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x53, 0x0a, 0x11, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x53, 0x45, 0x52, 0x56, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f,
	0x54, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x03,
	0x22, 0x1f, 0x0a, 0x0b, 0x45, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x22, 0x20, 0x0a, 0x0c, 0x45, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x22, 0x31, 0x0a, 0x13, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x28, 0x0a, 0x14, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67,
	0x32, 0x46, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3c, 0x0a, 0x03, 0x47, 0x65,
	0x74, 0x12, 0x19, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x46, 0x0a, 0x06, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x3c, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x19, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x32, 0x47, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x03,
	0x47, 0x65, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1c, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x42, 0x0a, 0x0c, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x32, 0x0a, 0x03, 0x53, 0x65, 0x74,
	0x12, 0x13, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0x42, 0x0a,
	0x0b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x33, 0x0a, 0x04,
	0x45, 0x63, 0x68, 0x6f, 0x12, 0x14, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x45,
	0x63, 0x68, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x32, 0x57, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x4d, 0x0a, 0x0c, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1c, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x42, 0x3b, 0x5a, 0x39, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x2d, 0x48, 0x65,
	0x78, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x3b,
	0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_internal_testing_testing_proto_rawDescOnce sync.Once
	file_internal_testing_testing_proto_rawDescData = file_internal_testing_testing_proto_rawDesc
)

func file_internal_testing_testing_proto_rawDescGZIP() []byte {
	file_internal_testing_testing_proto_rawDescOnce.Do(func() {
		file_internal_testing_testing_proto_rawDescData = protoimpl.X.CompressGZIP(file_internal_testing_testing_proto_rawDescData)
	})
	return file_internal_testing_testing_proto_rawDescData
}

var file_internal_testing_testing_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_internal_testing_testing_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_internal_testing_testing_proto_goTypes = []interface{}{
	(StatusGetRequest_Code)(0),        // 0: testing.StatusGetRequest.Code
	(DetailGetRequest_Code)(0),        // 1: testing.DetailGetRequest.Code
	(SetRequest_HealthCheckStatus)(0), // 2: testing.SetRequest.HealthCheckStatus
	(*StatusGetRequest)(nil),          // 3: testing.StatusGetRequest
	(*StatusGetResponse)(nil),         // 4: testing.StatusGetResponse
	(*DetailGetRequest)(nil),          // 5: testing.DetailGetRequest
	(*DetailGetResponse)(nil),         // 6: testing.DetailGetResponse
	(*MetadataGetResponse)(nil),       // 7: testing.MetadataGetResponse
	(*SetRequest)(nil),                // 8: testing.SetRequest
	(*EchoRequest)(nil),               // 9: testing.EchoRequest
	(*EchoResponse)(nil),              // 10: testing.EchoResponse
	(*ServerStreamRequest)(nil),       // 11: testing.ServerStreamRequest
	(*ServerStreamResponse)(nil),      // 12: testing.ServerStreamResponse
	(*MetadataGetResponse_Entry)(nil), // 13: testing.MetadataGetResponse.Entry
	(*empty.Empty)(nil),               // 14: google.protobuf.Empty
}
var file_internal_testing_testing_proto_depIdxs = []int32{
	0,  // 0: testing.StatusGetRequest.code:type_name -> testing.StatusGetRequest.Code
	1,  // 1: testing.DetailGetRequest.code:type_name -> testing.DetailGetRequest.Code
	13, // 2: testing.MetadataGetResponse.metadata:type_name -> testing.MetadataGetResponse.Entry
	2,  // 3: testing.SetRequest.status:type_name -> testing.SetRequest.HealthCheckStatus
	3,  // 4: testing.Status.Get:input_type -> testing.StatusGetRequest
	5,  // 5: testing.Detail.Get:input_type -> testing.DetailGetRequest
	14, // 6: testing.Metadata.Get:input_type -> google.protobuf.Empty
	8,  // 7: testing.ChangeHealth.Set:input_type -> testing.SetRequest
	9,  // 8: testing.Interceptor.Echo:input_type -> testing.EchoRequest
	11, // 9: testing.Stream.ServerStream:input_type -> testing.ServerStreamRequest
	4,  // 10: testing.Status.Get:output_type -> testing.StatusGetResponse
	6,  // 11: testing.Detail.Get:output_type -> testing.DetailGetResponse
	7,  // 12: testing.Metadata.Get:output_type -> testing.MetadataGetResponse
	14, // 13: testing.ChangeHealth.Set:output_type -> google.protobuf.Empty
	10, // 14: testing.Interceptor.Echo:output_type -> testing.EchoResponse
	12, // 15: testing.Stream.ServerStream:output_type -> testing.ServerStreamResponse
	10, // [10:16] is the sub-list for method output_type
	4,  // [4:10] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_internal_testing_testing_proto_init() }
func file_internal_testing_testing_proto_init() {
	if File_internal_testing_testing_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_internal_testing_testing_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_testing_testing_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_testing_testing_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetailGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_testing_testing_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetailGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_testing_testing_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetadataGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_testing_testing_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_testing_testing_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EchoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_testing_testing_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EchoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_testing_testing_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_testing_testing_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_testing_testing_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetadataGetResponse_Entry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_internal_testing_testing_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   6,
		},
		GoTypes:           file_internal_testing_testing_proto_goTypes,
		DependencyIndexes: file_internal_testing_testing_proto_depIdxs,
		EnumInfos:         file_internal_testing_testing_proto_enumTypes,
		MessageInfos:      file_internal_testing_testing_proto_msgTypes,
	}.Build()
	File_internal_testing_testing_proto = out.File
	file_internal_testing_testing_proto_rawDesc = nil
	file_internal_testing_testing_proto_goTypes = nil
	file_internal_testing_testing_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// StatusClient is the client API for Status service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StatusClient interface {
	Get(ctx context.Context, in *StatusGetRequest, opts ...grpc.CallOption) (*StatusGetResponse, error)
}

type statusClient struct {
	cc grpc.ClientConnInterface
}

func NewStatusClient(cc grpc.ClientConnInterface) StatusClient {
	return &statusClient{cc}
}

func (c *statusClient) Get(ctx context.Context, in *StatusGetRequest, opts ...grpc.CallOption) (*StatusGetResponse, error) {
	out := new(StatusGetResponse)
	err := c.cc.Invoke(ctx, "/testing.Status/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatusServer is the server API for Status service.
type StatusServer interface {
	Get(context.Context, *StatusGetRequest) (*StatusGetResponse, error)
}

// UnimplementedStatusServer can be embedded to have forward compatible implementations.
type UnimplementedStatusServer struct {
}

func (*UnimplementedStatusServer) Get(context.Context, *StatusGetRequest) (*StatusGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}

func RegisterStatusServer(s *grpc.Server, srv StatusServer) {
	s.RegisterService(&_Status_serviceDesc, srv)
}

func _Status_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testing.Status/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusServer).Get(ctx, req.(*StatusGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Status_serviceDesc = grpc.ServiceDesc{
	ServiceName: "testing.Status",
	HandlerType: (*StatusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Status_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/testing/testing.proto",
}

// DetailClient is the client API for Detail service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DetailClient interface {
	Get(ctx context.Context, in *DetailGetRequest, opts ...grpc.CallOption) (*DetailGetResponse, error)
}

type detailClient struct {
	cc grpc.ClientConnInterface
}

func NewDetailClient(cc grpc.ClientConnInterface) DetailClient {
	return &detailClient{cc}
}

func (c *detailClient) Get(ctx context.Context, in *DetailGetRequest, opts ...grpc.CallOption) (*DetailGetResponse, error) {
	out := new(DetailGetResponse)
	err := c.cc.Invoke(ctx, "/testing.Detail/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DetailServer is the server API for Detail service.
type DetailServer interface {
	Get(context.Context, *DetailGetRequest) (*DetailGetResponse, error)
}

// UnimplementedDetailServer can be embedded to have forward compatible implementations.
type UnimplementedDetailServer struct {
}

func (*UnimplementedDetailServer) Get(context.Context, *DetailGetRequest) (*DetailGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}

func RegisterDetailServer(s *grpc.Server, srv DetailServer) {
	s.RegisterService(&_Detail_serviceDesc, srv)
}

func _Detail_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetailGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DetailServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testing.Detail/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DetailServer).Get(ctx, req.(*DetailGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Detail_serviceDesc = grpc.ServiceDesc{
	ServiceName: "testing.Detail",
	HandlerType: (*DetailServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Detail_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/testing/testing.proto",
}

// MetadataClient is the client API for Metadata service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MetadataClient interface {
	Get(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*MetadataGetResponse, error)
}

type metadataClient struct {
	cc grpc.ClientConnInterface
}

func NewMetadataClient(cc grpc.ClientConnInterface) MetadataClient {
	return &metadataClient{cc}
}

func (c *metadataClient) Get(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*MetadataGetResponse, error) {
	out := new(MetadataGetResponse)
	err := c.cc.Invoke(ctx, "/testing.Metadata/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetadataServer is the server API for Metadata service.
type MetadataServer interface {
	Get(context.Context, *empty.Empty) (*MetadataGetResponse, error)
}

// UnimplementedMetadataServer can be embedded to have forward compatible implementations.
type UnimplementedMetadataServer struct {
}

func (*UnimplementedMetadataServer) Get(context.Context, *empty.Empty) (*MetadataGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}

func RegisterMetadataServer(s *grpc.Server, srv MetadataServer) {
	s.RegisterService(&_Metadata_serviceDesc, srv)
}

func _Metadata_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testing.Metadata/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServer).Get(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Metadata_serviceDesc = grpc.ServiceDesc{
	ServiceName: "testing.Metadata",
	HandlerType: (*MetadataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Metadata_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/testing/testing.proto",
}

// ChangeHealthClient is the client API for ChangeHealth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChangeHealthClient interface {
	Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type changeHealthClient struct {
	cc grpc.ClientConnInterface
}

func NewChangeHealthClient(cc grpc.ClientConnInterface) ChangeHealthClient {
	return &changeHealthClient{cc}
}

func (c *changeHealthClient) Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/testing.ChangeHealth/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChangeHealthServer is the server API for ChangeHealth service.
type ChangeHealthServer interface {
	Set(context.Context, *SetRequest) (*empty.Empty, error)
}

// UnimplementedChangeHealthServer can be embedded to have forward compatible implementations.
type UnimplementedChangeHealthServer struct {
}

func (*UnimplementedChangeHealthServer) Set(context.Context, *SetRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}

func RegisterChangeHealthServer(s *grpc.Server, srv ChangeHealthServer) {
	s.RegisterService(&_ChangeHealth_serviceDesc, srv)
}

func _ChangeHealth_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChangeHealthServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testing.ChangeHealth/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChangeHealthServer).Set(ctx, req.(*SetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChangeHealth_serviceDesc = grpc.ServiceDesc{
	ServiceName: "testing.ChangeHealth",
	HandlerType: (*ChangeHealthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Set",
			Handler:    _ChangeHealth_Set_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/testing/testing.proto",
}

// InterceptorClient is the client API for Interceptor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InterceptorClient interface {
	Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error)
}

type interceptorClient struct {
	cc grpc.ClientConnInterface
}

func NewInterceptorClient(cc grpc.ClientConnInterface) InterceptorClient {
	return &interceptorClient{cc}
}

func (c *interceptorClient) Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error) {
	out := new(EchoResponse)
	err := c.cc.Invoke(ctx, "/testing.Interceptor/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InterceptorServer is the server API for Interceptor service.
type InterceptorServer interface {
	Echo(context.Context, *EchoRequest) (*EchoResponse, error)
}

// UnimplementedInterceptorServer can be embedded to have forward compatible implementations.
type UnimplementedInterceptorServer struct {
}

func (*UnimplementedInterceptorServer) Echo(context.Context, *EchoRequest) (*EchoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}

func RegisterInterceptorServer(s *grpc.Server, srv InterceptorServer) {
	s.RegisterService(&_Interceptor_serviceDesc, srv)
}

func _Interceptor_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterceptorServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testing.Interceptor/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterceptorServer).Echo(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Interceptor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "testing.Interceptor",
	HandlerType: (*InterceptorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _Interceptor_Echo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/testing/testing.proto",
}

// StreamClient is the client API for Stream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StreamClient interface {
	ServerStream(ctx context.Context, in *ServerStreamRequest, opts ...grpc.CallOption) (Stream_ServerStreamClient, error)
}

type streamClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamClient(cc grpc.ClientConnInterface) StreamClient {
	return &streamClient{cc}
}

func (c *streamClient) ServerStream(ctx context.Context, in *ServerStreamRequest, opts ...grpc.CallOption) (Stream_ServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Stream_serviceDesc.Streams[0], "/testing.Stream/ServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Stream_ServerStreamClient interface {
	Recv() (*ServerStreamResponse, error)
	grpc.ClientStream
}

type streamServerStreamClient struct {
	grpc.ClientStream
}

func (x *streamServerStreamClient) Recv() (*ServerStreamResponse, error) {
	m := new(ServerStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamServer is the server API for Stream service.
type StreamServer interface {
	ServerStream(*ServerStreamRequest, Stream_ServerStreamServer) error
}

// UnimplementedStreamServer can be embedded to have forward compatible implementations.
type UnimplementedStreamServer struct {
}

func (*UnimplementedStreamServer) ServerStream(*ServerStreamRequest, Stream_ServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStream not implemented")
}

func RegisterStreamServer(s *grpc.Server, srv StreamServer) {
	s.RegisterService(&_Stream_serviceDesc, srv)
}

func _Stream_ServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ServerStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamServer).ServerStream(m, &streamServerStreamServer{stream})
}

type Stream_ServerStreamServer interface {
	Send(*ServerStreamResponse) error
	grpc.ServerStream
}

type streamServerStreamServer struct {
	grpc.ServerStream
}

func (x *streamServerStreamServer) Send(m *ServerStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Stream_serviceDesc = grpc.ServiceDesc{
	ServiceName: "testing.Stream",
	HandlerType: (*StreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStream",
			Handler:       _Stream_ServerStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "internal/testing/testing.proto",
}
