// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: testing.proto

package testing

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StatusClient is the client API for Status service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StatusClient interface {
	Get(ctx context.Context, in *StatusGetRequest, opts ...grpc.CallOption) (*StatusGetResponse, error)
}

type statusClient struct {
	cc grpc.ClientConnInterface
}

func NewStatusClient(cc grpc.ClientConnInterface) StatusClient {
	return &statusClient{cc}
}

func (c *statusClient) Get(ctx context.Context, in *StatusGetRequest, opts ...grpc.CallOption) (*StatusGetResponse, error) {
	out := new(StatusGetResponse)
	err := c.cc.Invoke(ctx, "/testing.Status/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatusServer is the server API for Status service.
// All implementations should embed UnimplementedStatusServer
// for forward compatibility
type StatusServer interface {
	Get(context.Context, *StatusGetRequest) (*StatusGetResponse, error)
}

// UnimplementedStatusServer should be embedded to have forward compatible implementations.
type UnimplementedStatusServer struct {
}

func (UnimplementedStatusServer) Get(context.Context, *StatusGetRequest) (*StatusGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}

// UnsafeStatusServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatusServer will
// result in compilation errors.
type UnsafeStatusServer interface {
	mustEmbedUnimplementedStatusServer()
}

func RegisterStatusServer(s grpc.ServiceRegistrar, srv StatusServer) {
	s.RegisterService(&Status_ServiceDesc, srv)
}

func _Status_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testing.Status/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusServer).Get(ctx, req.(*StatusGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Status_ServiceDesc is the grpc.ServiceDesc for Status service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Status_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "testing.Status",
	HandlerType: (*StatusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Status_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "testing.proto",
}

// DetailClient is the client API for Detail service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DetailClient interface {
	Get(ctx context.Context, in *DetailGetRequest, opts ...grpc.CallOption) (*DetailGetResponse, error)
}

type detailClient struct {
	cc grpc.ClientConnInterface
}

func NewDetailClient(cc grpc.ClientConnInterface) DetailClient {
	return &detailClient{cc}
}

func (c *detailClient) Get(ctx context.Context, in *DetailGetRequest, opts ...grpc.CallOption) (*DetailGetResponse, error) {
	out := new(DetailGetResponse)
	err := c.cc.Invoke(ctx, "/testing.Detail/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DetailServer is the server API for Detail service.
// All implementations should embed UnimplementedDetailServer
// for forward compatibility
type DetailServer interface {
	Get(context.Context, *DetailGetRequest) (*DetailGetResponse, error)
}

// UnimplementedDetailServer should be embedded to have forward compatible implementations.
type UnimplementedDetailServer struct {
}

func (UnimplementedDetailServer) Get(context.Context, *DetailGetRequest) (*DetailGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}

// UnsafeDetailServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DetailServer will
// result in compilation errors.
type UnsafeDetailServer interface {
	mustEmbedUnimplementedDetailServer()
}

func RegisterDetailServer(s grpc.ServiceRegistrar, srv DetailServer) {
	s.RegisterService(&Detail_ServiceDesc, srv)
}

func _Detail_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetailGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DetailServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testing.Detail/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DetailServer).Get(ctx, req.(*DetailGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Detail_ServiceDesc is the grpc.ServiceDesc for Detail service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Detail_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "testing.Detail",
	HandlerType: (*DetailServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Detail_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "testing.proto",
}

// MetadataClient is the client API for Metadata service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetadataClient interface {
	Get(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MetadataGetResponse, error)
}

type metadataClient struct {
	cc grpc.ClientConnInterface
}

func NewMetadataClient(cc grpc.ClientConnInterface) MetadataClient {
	return &metadataClient{cc}
}

func (c *metadataClient) Get(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MetadataGetResponse, error) {
	out := new(MetadataGetResponse)
	err := c.cc.Invoke(ctx, "/testing.Metadata/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetadataServer is the server API for Metadata service.
// All implementations should embed UnimplementedMetadataServer
// for forward compatibility
type MetadataServer interface {
	Get(context.Context, *emptypb.Empty) (*MetadataGetResponse, error)
}

// UnimplementedMetadataServer should be embedded to have forward compatible implementations.
type UnimplementedMetadataServer struct {
}

func (UnimplementedMetadataServer) Get(context.Context, *emptypb.Empty) (*MetadataGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}

// UnsafeMetadataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetadataServer will
// result in compilation errors.
type UnsafeMetadataServer interface {
	mustEmbedUnimplementedMetadataServer()
}

func RegisterMetadataServer(s grpc.ServiceRegistrar, srv MetadataServer) {
	s.RegisterService(&Metadata_ServiceDesc, srv)
}

func _Metadata_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testing.Metadata/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServer).Get(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Metadata_ServiceDesc is the grpc.ServiceDesc for Metadata service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Metadata_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "testing.Metadata",
	HandlerType: (*MetadataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Metadata_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "testing.proto",
}

// ChangeHealthClient is the client API for ChangeHealth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChangeHealthClient interface {
	Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type changeHealthClient struct {
	cc grpc.ClientConnInterface
}

func NewChangeHealthClient(cc grpc.ClientConnInterface) ChangeHealthClient {
	return &changeHealthClient{cc}
}

func (c *changeHealthClient) Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/testing.ChangeHealth/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChangeHealthServer is the server API for ChangeHealth service.
// All implementations should embed UnimplementedChangeHealthServer
// for forward compatibility
type ChangeHealthServer interface {
	Set(context.Context, *SetRequest) (*emptypb.Empty, error)
}

// UnimplementedChangeHealthServer should be embedded to have forward compatible implementations.
type UnimplementedChangeHealthServer struct {
}

func (UnimplementedChangeHealthServer) Set(context.Context, *SetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}

// UnsafeChangeHealthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChangeHealthServer will
// result in compilation errors.
type UnsafeChangeHealthServer interface {
	mustEmbedUnimplementedChangeHealthServer()
}

func RegisterChangeHealthServer(s grpc.ServiceRegistrar, srv ChangeHealthServer) {
	s.RegisterService(&ChangeHealth_ServiceDesc, srv)
}

func _ChangeHealth_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChangeHealthServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testing.ChangeHealth/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChangeHealthServer).Set(ctx, req.(*SetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChangeHealth_ServiceDesc is the grpc.ServiceDesc for ChangeHealth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChangeHealth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "testing.ChangeHealth",
	HandlerType: (*ChangeHealthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Set",
			Handler:    _ChangeHealth_Set_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "testing.proto",
}

// InterceptorClient is the client API for Interceptor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InterceptorClient interface {
	Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error)
}

type interceptorClient struct {
	cc grpc.ClientConnInterface
}

func NewInterceptorClient(cc grpc.ClientConnInterface) InterceptorClient {
	return &interceptorClient{cc}
}

func (c *interceptorClient) Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error) {
	out := new(EchoResponse)
	err := c.cc.Invoke(ctx, "/testing.Interceptor/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InterceptorServer is the server API for Interceptor service.
// All implementations should embed UnimplementedInterceptorServer
// for forward compatibility
type InterceptorServer interface {
	Echo(context.Context, *EchoRequest) (*EchoResponse, error)
}

// UnimplementedInterceptorServer should be embedded to have forward compatible implementations.
type UnimplementedInterceptorServer struct {
}

func (UnimplementedInterceptorServer) Echo(context.Context, *EchoRequest) (*EchoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}

// UnsafeInterceptorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InterceptorServer will
// result in compilation errors.
type UnsafeInterceptorServer interface {
	mustEmbedUnimplementedInterceptorServer()
}

func RegisterInterceptorServer(s grpc.ServiceRegistrar, srv InterceptorServer) {
	s.RegisterService(&Interceptor_ServiceDesc, srv)
}

func _Interceptor_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterceptorServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testing.Interceptor/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterceptorServer).Echo(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Interceptor_ServiceDesc is the grpc.ServiceDesc for Interceptor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Interceptor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "testing.Interceptor",
	HandlerType: (*InterceptorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _Interceptor_Echo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "testing.proto",
}
